<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++Socket编程</title>
    <url>/2023/02/19/C++Socket%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Manacher</title>
    <url>/2022/11/29/Manacher/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />		

<p>​	给定一个字符串$abbcbbbcbbbad$，求该字符串的最长回文子串的长度。</p>
<h3 id="暴力匹配"><a href="#暴力匹配" class="headerlink" title="暴力匹配"></a>暴力匹配</h3><p>​		两个 $for$$ 循环遍历所有子串，再判断所有子串是否回文，再通过比较获取最长回文子串长度，算法复杂度为 $$O(N^3)$</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212100439.png" alt="image-20221221210004388"></p>
<h3 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a>朴素算法</h3><p>​		先遍历一遍字符串，对于每个 $i$，以它作为字符串的中心向字符串两边扩展，在遍历获得子串的同时完成对是否回文的判断，这样就将时间复杂度优化到了 $O(N^2)$，需要分别计算奇数串和偶数串</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212100576.png" alt="202211291956549"></p>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> mmax=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">    <span class="type">int</span> d1=<span class="number">1</span>,d2=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//奇数串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;std::<span class="built_in">min</span>(i,len);++j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i-j]!=str[i+j]) <span class="keyword">return</span>;</span><br><span class="line">        d1+=<span class="number">2</span>;</span><br><span class="line">	&#125;  </span><br><span class="line">    <span class="comment">//偶数串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;std::<span class="built_in">min</span>(i,len-i<span class="number">-1</span>);++j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i-j]!=str[i+<span class="number">1</span>+j]) <span class="keyword">return</span>;</span><br><span class="line">        d2+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mmax=std::<span class="built_in">max</span>(mmax,std::<span class="built_in">max</span>(d1,d2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Manacher算法"><a href="#Manacher算法" class="headerlink" title="Manacher算法"></a>Manacher算法</h3><h4 id="奇数串"><a href="#奇数串" class="headerlink" title="奇数串"></a>奇数串</h4><p>我们先定义：</p>
<p>$d[i]$：表示以 $i$ 为中心的最长回文子串的长度</p>
<p>$mx,id$：$mx$ 就是以 $id$ 为中心的最右回文边界，即 $mx&#x3D;max(i+d[i]&#x2F;2)$，$id&#x3D;i$</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212101292.png" alt="202211291950905"></p>
<p>我们继续遍历字符串，当 $i \lt mx$ 时，我们可以发现一个 $j$ 与 $i$ 关于 $id$ 对称</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212105286.png" alt="202211291950954"></p>
<p>此时，我们可以发现，<strong>在 $d[id]$ 的范围内</strong>，任何以 $j$ 为中心的子串，都可以找到一个以 $i$ 为中心的子串与它相反（<del>因为 $i$ 和 $j$ 关于 $id$ 对称，且 $d[id]$ 是回文串</del>），而又因为回文串是以中心对称的，即：</p>
<p><strong>任何以 $j$ 为中心的回文子串，都可以找到一个以 $i$ 为中心的子串与它相等</strong></p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212106854.png" alt="202211291951492"></p>
<p>所以，以 $i$ 为中心的最长回文子串的长度至少为 $min(d[j],2*(mx-i)+1)$，接下来再利用朴素算法来对超过 $mx$ 的部分进行判断</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212106297.png" alt="202211291951801"></p>
<p>最后，再更新 $id$ 和 $mx$</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212106908.png" alt="202211291951303"></p>
<h5 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; odd;</span><br><span class="line"><span class="type">int</span> id=<span class="number">0</span>,mx=<span class="number">0</span>,mmax=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">    <span class="comment">//回文半径</span></span><br><span class="line">	<span class="type">int</span> k=(i&gt;mx) ? <span class="number">1</span> : std::<span class="built_in">min</span>(odd[<span class="number">2</span>*id-i]/<span class="number">2</span>,mx-i);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">0</span>&lt;=i-k &amp;&amp; i+k&lt;len &amp;&amp; str[i-k]==str[i+k]) ++k;</span><br><span class="line">    --k;</span><br><span class="line">    odd[i]=<span class="number">2</span>*k+<span class="number">1</span>;</span><br><span class="line">    mmax=std::<span class="built_in">max</span>(mmax,odd[i]);</span><br><span class="line">    <span class="keyword">if</span>(i+k&gt;mx)&#123;</span><br><span class="line">		id=i;</span><br><span class="line">        mx=i+k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="偶数串"><a href="#偶数串" class="headerlink" title="偶数串"></a>偶数串</h4><p>偶数部分只需要对奇数的代码做一点修改即可</p>
<h5 id="代码实现：-2"><a href="#代码实现：-2" class="headerlink" title="代码实现："></a>代码实现：</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; even;</span><br><span class="line"><span class="type">int</span> id=<span class="number">0</span>,mx=<span class="number">0</span>,mmax=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">    <span class="comment">//回文半径</span></span><br><span class="line">	<span class="type">int</span> k=(i&gt;mx) ? <span class="number">0</span> : std::<span class="built_in">min</span>(even[<span class="number">2</span>*id-i+<span class="number">1</span>]/<span class="number">2</span>,mx-i);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">0</span>&lt;=i-k &amp;&amp; i+<span class="number">1</span>+k&lt;len &amp;&amp; str[i-k]==str[i+<span class="number">1</span>+k]) ++k;</span><br><span class="line">    even[i]=<span class="number">2</span>*k;</span><br><span class="line">    mmax=std::<span class="built_in">max</span>(mmax,even[i]);</span><br><span class="line">    <span class="keyword">if</span>(i+k&gt;mx)&#123;</span><br><span class="line">		id=i;</span><br><span class="line">        mx=i+k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p>在前面我们都是将奇数串和偶数串分开来算，实际上我们可以通过插入无意义的符号来使二者都统一为奇数串。</p>
<p>对于前面给定的字符串 $abbcbbbcbbbad$ ，我们插入 $len+1$ 个分隔符 $#$，使字符串变成 $#a#b#b#c#b#b#b#c#b#b#b#a#d#$，这样所有的子串的长度都为奇数了，最后除以2就是真正子串的长度了。</p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><ul>
<li><a href="https://www.luogu.com.cn/problem/P1659">P1659 [国家集训队]拉拉队排练</a> </li>
<li><a href="https://www.luogu.com.cn/problem/P3501">P3501[POI2010]ANT-Antisymmetry</a> </li>
<li><a href="https://www.luogu.com.cn/problem/UVA11475">UVA11475 Extend to Palindrome</a> </li>
<li><a href="https://www.luogu.com.cn/problem/P6216">P6216 回文匹配</a> </li>
<li><a href="https://www.luogu.com.cn/problem/P4555">P4555[国家集训队]最长双回文串 </a> </li>
<li><a href="https://www.luogu.com.cn/problem/P5446">P5446 [THUPC2018]绿绿和串串</a></li>
</ul>
]]></content>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Trie</title>
    <url>/2022/11/29/Trie/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>字典树也叫Trie树、前缀树，是一种针对字符串进行维护的<strong>数据结构</strong>，而不是算法。</p>
<p>字典树是对字符串的一种存储的方式，这棵树的根节点到某一个目标节点的路径就是一个字符串（单词）。</p>
<p>举个例子，下图的字典树：</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212057021.png" alt="202211291950874"></p>
<p>该字典树存储的单词为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">abc</span><br><span class="line">ba</span><br><span class="line">bca</span><br><span class="line">bca</span><br><span class="line">ca</span><br><span class="line">ca</span><br></pre></td></tr></table></figure>

<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ul>
<li>根节点不包含字符，除根节点外的所有节点都包含一个字符</li>
<li>从根节点到某一个节点，路径上经过的所有字符连接起来，为该节点对应的字符串</li>
<li>每个节点的子节点包含的字符各不相同</li>
</ul>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul>
<li>计算热词：统计字符串在集合中出现的个数</li>
<li>字典序排序</li>
<li>最长公共前缀（LCP）</li>
<li>…</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>字典树的实现主要有<strong>插入和查找</strong></p>
<p>假设该字符串集合由26个小写字母组成，我们定义两个数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> next[<span class="number">100000</span>][<span class="number">26</span>],cnt; <span class="comment">//存放该节点的子节点</span></span><br><span class="line"><span class="type">int</span> num[<span class="number">100000</span>]; <span class="comment">//表示该字符串一共出现多少次，为0表示不存在</span></span><br></pre></td></tr></table></figure>

<h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(std::string str)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len=str.<span class="built_in">length</span>();</span><br><span class="line">	<span class="type">int</span> p=<span class="number">0</span>; <span class="comment">//记录当前节点位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">    	<span class="type">int</span> c=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!next[p][c]) next[p][c]=++cnt;</span><br><span class="line">        p=next[p][c];</span><br><span class="line">    &#125;</span><br><span class="line">    ++num[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(std::string str)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> len=str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">		<span class="type">int</span> c=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!next[p][c]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p=next[p][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul>
<li><a href="https://www.luogu.com.cn/problem/SP4033">SP4033 PHONELST - Phone List</a></li>
<li><a href="https://www.luogu.com.cn/problem/UVA1401">UVA1401 Remember the Word</a></li>
<li><a href="https://www.luogu.com.cn/problem/UVA11732">UVA11732 “strcmp()” Anyone?</a> </li>
<li><a href="https://www.luogu.com.cn/problem/P7469">P7469 [NOI Online 2021 提高组] 积木小赛</a></li>
</ul>
]]></content>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/02/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>C++多线程</title>
    <url>/2023/02/19/C++%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>回文自动机(PAM)</title>
    <url>/2022/12/02/%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA-PAM/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>​	给定一个字符串$s$，求字符串$s$有多少个不同的回文子串？</p>
<p>​	如果使用$Manacher$算法来获得字符串中每个字符为中心的最长回文半径，再用$Hash$来查重所有的回文子串，时间复杂度为$O(N^2)$<del>（如果使用其他查重方式，时间复杂度可能更高）</del>，而<strong>回文自动机</strong>则能够以$O(N)$的时间复杂度来完成一些$Manacher$算法难以处理的回文串问题。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>​	回文自动机，也叫回文树，是一种在2014年发明的数据结构。</p>
<p>​	回文自动机，就是使用字典树来保存所有回文子串的回文半径，使用两棵树来分别保存偶数串和奇数串，<del>也可以像$Manacher$一样通过插入无意义的字符来只构建一棵树，但是这样处理起来比较麻烦</del>，在树上的一个节点代表一个回文子串，在最后使用节点数-2（减去两个根节点）就得到了不同回文子串的位置。</p>
<p>​	对于一个已知的字符串$abbcbbbcbbbad$，假设我们已经遍历了$abbcbbbcbb$，当我们遍历下一个字符$b$时，会进行如下判断：</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212051013.png" alt="202212021838948"></p>
<p>​	依次与包含前一个字符的回文子串从长到短进行匹配，匹配成功时则插入，都不匹配时，最后与自身匹配，为仅有一个字符的回文子串。</p>
<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>​	那么如何构建回文树呢？</p>
<p>​	我们首先定义如下变量：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> len[];  <span class="comment">//len[u]表示回文树中u节点代表的回文串的长度</span></span><br><span class="line"><span class="type">int</span> trie[][]; <span class="comment">//trie[u][c]表示编号为u的节点代表的回文串在两头加上字符c后的回文串的编号</span></span><br><span class="line"><span class="type">int</span> fail[];  <span class="comment">//fail[u]表示节点u失配后跳转到不等于自身的最长后缀回文串的编号（如上图）</span></span><br><span class="line"><span class="type">int</span> cnt[];  <span class="comment">//cnt[u]表示节点u所代表的回文串在整个字符串中出现了多少次</span></span><br><span class="line"><span class="type">int</span> num[];  <span class="comment">//num[u]表示u节点所代表的回文串有多少个本质不同的后缀回文子串</span></span><br><span class="line"><span class="type">int</span> last;  <span class="comment">//表示上一次插入字符的节点的编号</span></span><br><span class="line"><span class="type">int</span> tot;   <span class="comment">//有多少个节点</span></span><br></pre></td></tr></table></figure>

<p>​	首先我们定义两个节点，0号节点和1号节点，0号节点是偶树的根，1号节点则为奇树的根，初始化数据为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">len[<span class="number">0</span>]=<span class="number">0</span>;<span class="comment">//偶树每添加一个节点长度+2</span></span><br><span class="line">len[<span class="number">1</span>]=<span class="number">-1</span>;<span class="comment">//奇树中间节点只算一次，所以是-1</span></span><br><span class="line">fail[<span class="number">0</span>]=fail[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//新插入一个字符无论如何也能形成一个回文串（只有自身），所以fail[0]指向1号节点，而1号节点指向自身（无所谓）</span></span><br><span class="line">last=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>​	下面为字符串$str&#x3D;abbcbbb$的回文树构建过程：</p>
<p>初始化：</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212052224.png" alt="image-20221202200101839"></p>
<p>插入第一个字符$a$:</p>
<p>首先last指向0，我们先获取$str[0-len[last]-1]&#x3D;str[-1]!&#x3D;a$，则将$last&#x3D;fail[last]&#x3D;1$，发现$str[0-len[last]-1]&#x3D;str[0]&#x3D;a$，则在1号节点下新建节点插入$a$。</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212053362.png" alt="202212022048948"></p>
<p>插入第二个字符b：</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212053645.png" alt="202212022047647"></p>
<p>插入第三个字符b：</p>
<ul>
<li>$str[2-len[last]-1]&#x3D;str[0]!&#x3D;b$</li>
<li>$last&#x3D;fail[last]&#x3D;0$</li>
<li>$str[2-len[last]-1]&#x3D;str[1]&#x3D;b$</li>
<li>在0号节点下新建b节点</li>
<li>接下来求$fail$</li>
<li>令$last&#x3D;fail[last]&#x3D;1$（不能指向自身）</li>
<li>判断$str[2-len[last]-1]&#x3D;str[2]$是否等于b</li>
<li>再判断1节点下有没有为b的子节点，有就指向，没有则继续更新$last$</li>
<li>节点1下有为$b$的节点（即存在$trie[1][‘b’]$），编号为3，则将$fail[2]$指向3</li>
<li>最后将$last$指向4</li>
</ul>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212054705.png" alt="202212022107319"></p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212054443.png" alt="202212022111341"></p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212055112.png" alt="202212022147852"></p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212056858.png" alt="image-20221202215150351"></p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212056070.png" alt="image-20221202220630334"></p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212056276.png" alt="image-20221202220946755"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> len[MAXN],num[MAXN],fail[MAXN],cnt[MAXN];</span><br><span class="line"><span class="type">int</span> trie[MAXN][<span class="number">26</span>],tot=<span class="number">1</span>,last;</span><br><span class="line">std::string str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getfail</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(u-len[x]<span class="number">-1</span>&lt;<span class="number">0</span> || str[u-len[x]<span class="number">-1</span>]!=str[u]) x=fail[x];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cin&gt;&gt;str;</span><br><span class="line">    <span class="type">int</span> n=str.<span class="built_in">length</span>();</span><br><span class="line">    len[<span class="number">0</span>]=<span class="number">0</span>;len[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">    fail[<span class="number">0</span>]=fail[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="type">int</span> u=last;</span><br><span class="line">        u=<span class="built_in">getfail</span>(u,i);</span><br><span class="line">        <span class="keyword">if</span>(!trie[u][str[i]-<span class="string">&#x27;a&#x27;</span>])&#123;</span><br><span class="line">			fail[++tot]=trie[<span class="built_in">getfail</span>(fail[u],i)][str[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            trie[u][str[i]-<span class="string">&#x27;a&#x27;</span>]=tot;</span><br><span class="line">        	len[tot]=len[u]+<span class="number">2</span>;</span><br><span class="line">            num[tot]=num[fail[tot]]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        last=trie[u][str[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        ++cnt[last];</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=tot;i&gt;=<span class="number">2</span>;--i)&#123;</span><br><span class="line">        cnt[fail[i]]+=cnt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul>
<li><a href="https://www.luogu.com.cn/problem/P5496">洛谷P5496</a></li>
<li><a href="https://www.luogu.com.cn/problem/P3649">洛谷P3649</a></li>
<li><a href="https://www.luogu.com.cn/problem/P4287">洛谷P4287</a></li>
</ul>
]]></content>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>内存管理</title>
    <url>/2022/11/26/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="一、四种内存的分配释放方法"><a href="#一、四种内存的分配释放方法" class="headerlink" title="一、四种内存的分配释放方法"></a>一、四种内存的分配释放方法</h2><p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212036111.png" alt="image-20221221203603054"></p>
<table>
<thead>
<tr>
<th align="center">分配</th>
<th align="center">释放</th>
<th align="center">类别</th>
<th align="center">可否重载</th>
</tr>
</thead>
<tbody><tr>
<td align="center">malloc()</td>
<td align="center">free()</td>
<td align="center">C函数</td>
<td align="center">不可</td>
</tr>
<tr>
<td align="center">new</td>
<td align="center">delete</td>
<td align="center">C++表达式</td>
<td align="center">不可</td>
</tr>
<tr>
<td align="center">::operator new()</td>
<td align="center">::operator delete()</td>
<td align="center">C++函数</td>
<td align="center">不可</td>
</tr>
<tr>
<td align="center">allocator<T>::allocate()</td>
<td align="center">allocator<T>::deallocate()</td>
<td align="center">C++标准库</td>
<td align="center">可自由设计并搭配任何容器</td>
</tr>
</tbody></table>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212036146.png" alt="image-20221221203640061"></p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212036464.png" alt="image-20221221203648386"></p>
<h2 id="二、new-amp-delete-expression"><a href="#二、new-amp-delete-expression" class="headerlink" title="二、new&amp;delete expression"></a>二、new&amp;delete expression</h2><h3 id="1、new-expression"><a href="#1、new-expression" class="headerlink" title="1、new expression"></a>1、new expression</h3><p>对于代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Complex* pc = <span class="keyword">new</span> <span class="built_in">Complex</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>编译器会转换为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Complex *pc;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//分配内存大小</span></span><br><span class="line">    <span class="type">void</span>* mem = <span class="keyword">operator</span> <span class="built_in">new</span>( <span class="built_in">sizeof</span>(Complex) ); <span class="comment">//allocate</span></span><br><span class="line">    <span class="comment">//强制类型转换</span></span><br><span class="line">    pc = <span class="built_in">static_cast</span>&lt;Complex*&gt;(mem);             <span class="comment">//cast</span></span><br><span class="line">    <span class="comment">//调用目标类型的构造函数</span></span><br><span class="line">    pc-&gt;Complex::<span class="built_in">Complex</span>(<span class="number">1</span>,<span class="number">2</span>);                   <span class="comment">//constract</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    注意：只有编译器才可以像上面那样直接呼叫ctor(构造函数)</span></span><br><span class="line"><span class="comment">    欲直接调用ctor，可以运用placement new：</span></span><br><span class="line"><span class="comment">    new(p)Complex(1,2);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span>( std::bad_alloc )&#123;</span><br><span class="line">    <span class="comment">//若allocation失败就不执行constructor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>opeator new源码（VC）:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size,<span class="type">const</span> std::<span class="type">nothrow_t</span>&amp;)</span>_<span class="title">THROW0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//const std::nothrow_t&amp; 函数保证不抛出异常</span></span><br><span class="line">    <span class="comment">//该结构用作函数operator new参数，表示函数应该返回一个空指针来报告分配失败。而不是抛出异常。</span></span><br><span class="line">	<span class="comment">//try to allocate size bytes</span></span><br><span class="line">    <span class="type">void</span> *p;</span><br><span class="line">    <span class="comment">//内部调用了malloc函数</span></span><br><span class="line">    <span class="keyword">while</span>((p=<span class="built_in">malloc</span>(size))==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//buy more memory ot return null pointer</span></span><br><span class="line">        <span class="function">_TRY_BEGIN</span></span><br><span class="line"><span class="function">            <span class="title">if</span><span class="params">(_callnewh(size)==<span class="number">0</span>)</span> <span class="keyword">break</span></span>;</span><br><span class="line">        _CATCH(std::bad_alloc) <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">        _CATCH_END</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212037311.png" alt="image-20221221203705211"></p>
<h3 id="2、delete-expression"><a href="#2、delete-expression" class="headerlink" title="2、delete expression"></a>2、delete expression</h3><p>对于代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Complex* pc = <span class="keyword">new</span> <span class="built_in">Complex</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">......</span><br><span class="line"><span class="keyword">delete</span> pc;</span><br></pre></td></tr></table></figure>

<p>编译器会转为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pc-&gt;~<span class="built_in">Complex</span>();                 <span class="comment">//先析构</span></span><br><span class="line"><span class="comment">//不同于new expression，这里可以直接调用析构函数</span></span><br><span class="line"><span class="function">operatoe <span class="title">delete</span><span class="params">(pc)</span></span>;            <span class="comment">//然后释放内存</span></span><br></pre></td></tr></table></figure>

<p>opeator new源码（VC）:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.../vc98/crt/src/delop.cpp</span></span><br><span class="line"><span class="function">void__cdecl <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span> *p)</span>_<span class="title">THROW0</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//free an aallocated object</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="comment">//内部调用了free函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212037941.png" alt="image-20221221203713868"></p>
<h3 id="3、Ctor-amp-Dtor-直接调用"><a href="#3、Ctor-amp-Dtor-直接调用" class="headerlink" title="3、Ctor &amp; Dtor 直接调用"></a>3、Ctor &amp; Dtor 直接调用</h3><p>模拟编译器调用构造函数和析构函数</p>
<p>测试代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;memory&gt;				 //std::allocator  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> jj02</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">A</span>() : <span class="built_in">id</span>(<span class="number">0</span>)      &#123; cout &lt;&lt; <span class="string">&quot;default ctor. this=&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot; id=&quot;</span> &lt;&lt; id &lt;&lt; endl; &#125;</span><br><span class="line">		<span class="built_in">A</span>(<span class="type">int</span> i) : <span class="built_in">id</span>(i) &#123; cout &lt;&lt; <span class="string">&quot;ctor. this=&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot; id=&quot;</span> &lt;&lt; id &lt;&lt; endl; &#125;</span><br><span class="line">		~<span class="built_in">A</span>()             &#123; cout &lt;&lt; <span class="string">&quot;dtor. this=&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot; id=&quot;</span> &lt;&lt; id &lt;&lt; endl; &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">test_call_ctor_directly</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\ntest_call_ctor_directly().......... \n&quot;</span>;</span><br><span class="line"></span><br><span class="line">		string* pstr = <span class="keyword">new</span> string;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;str= &quot;</span> &lt;&lt; *pstr &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//! pstr-&gt;string::string(&quot;jjhou&quot;);  </span></span><br><span class="line">		<span class="comment">//[Error] &#x27;class std::basic_string&lt;char&gt;&#x27; has no member named &#x27;string&#x27;</span></span><br><span class="line">		<span class="comment">//! pstr-&gt;~string();	//crash -- 其語法語意都是正確的, crash 只因為上一行被 remark 起來嘛.  </span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;str= &quot;</span> &lt;&lt; *pstr &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//------------</span></span><br><span class="line"></span><br><span class="line">		A* pA = <span class="keyword">new</span> <span class="built_in">A</span>(<span class="number">1</span>);         	<span class="comment">//ctor. this=000307A8 id=1</span></span><br><span class="line">		cout &lt;&lt; pA-&gt;id &lt;&lt; endl;   	<span class="comment">//1</span></span><br><span class="line">		pA-&gt;A::<span class="built_in">A</span>(<span class="number">3</span>);</span><br><span class="line">		cout &lt;&lt; pA-&gt;id &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//!	pA-&gt;A::A(3);                //in VC6 : ctor. this=000307A8 id=3</span></span><br><span class="line">		<span class="comment">//in GCC : [Error] cannot call constructor &#x27;jj02::A::A&#x27; directly</span></span><br><span class="line"></span><br><span class="line">		A::<span class="built_in">A</span>(<span class="number">5</span>);</span><br><span class="line">		<span class="comment">//!	A::A(5);	  				//in VC6 : ctor. this=0013FF60 id=5</span></span><br><span class="line">		<span class="comment">//         dtor. this=0013FF60  	</span></span><br><span class="line">		<span class="comment">//in GCC : [Error] cannot call constructor &#x27;jj02::A::A&#x27; directly</span></span><br><span class="line">		<span class="comment">//         [Note] for a function-style cast, remove the redundant &#x27;::A&#x27;</span></span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; pA-&gt;id &lt;&lt; endl;   	<span class="comment">//in VC6 : 3</span></span><br><span class="line">		<span class="comment">//in GCC : 1  	</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">delete</span> pA;                	<span class="comment">//dtor. this=000307A8 </span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//simulate new</span></span><br><span class="line">		<span class="type">void</span>* p = ::<span class="keyword">operator</span> <span class="built_in">new</span>(<span class="built_in">sizeof</span>(A));</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;p=&quot;</span> &lt;&lt; p &lt;&lt; endl; 	<span class="comment">//p=000307A8</span></span><br><span class="line">		pA = <span class="built_in">static_cast</span>&lt;A*&gt;(p);</span><br><span class="line">		pA-&gt;A::<span class="built_in">A</span>(<span class="number">2</span>);</span><br><span class="line">		<span class="comment">//!	pA-&gt;A::A(2);				//in VC6 : ctor. this=000307A8 id=2</span></span><br><span class="line">		<span class="comment">//in GCC : [Error] cannot call constructor &#x27;jj02::A::A&#x27; directly  	</span></span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; pA-&gt;id &lt;&lt; endl;     <span class="comment">//in VC6 : 2</span></span><br><span class="line">		<span class="comment">//in GCC : 0  	</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//simulate delete</span></span><br><span class="line">		pA-&gt;~<span class="built_in">A</span>();					<span class="comment">//dtor. this=000307A8 </span></span><br><span class="line">		::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pA)</span></span>;		<span class="comment">//free()</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="comment">//namespace</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	jj02::<span class="built_in">test_call_ctor_directly</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在VSCODE下使用g++进行编译结果如下：</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212037805.png" alt="image-20221221203723758"></p>
<p>显示不能调用构造函数</p>
<p>而在VS使用MSVC进行的编译结果如下：</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212037526.png" alt="image-20221221203729475"></p>
<p>严格来说，是不能直接调用构造函数的</p>
<h2 id="三、Array-new"><a href="#三、Array-new" class="headerlink" title="三、Array new"></a>三、Array new</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Complex* pca = <span class="keyword">new</span> Complex[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//唤起三次ctor</span></span><br><span class="line"><span class="comment">//无法藉由参数给予初值</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span>[] pca;<span class="comment">//唤起三次dtor</span></span><br><span class="line"><span class="comment">//如果没带[]，则只会唤起一次dtor</span></span><br></pre></td></tr></table></figure>

<p>如果没有对每个object都调用dtor：</p>
<ul>
<li>对于 <strong>class without ptr member</strong> 可能没有影响</li>
<li>对于 <strong>class with pointer member</strong>（带指针的类）通常有影响–内存泄漏</li>
</ul>
<p>所以对于上面的代码，其实调用一次dtor和调用三次dtor是相同的</p>
<p>而对于下面的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string* psa = <span class="keyword">new</span> string[<span class="number">3</span>];</span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span> psa;<span class="comment">//唤起一次dtor</span></span><br></pre></td></tr></table></figure>

<p>这样只析构了一个对象，从而会导致内存泄漏</p>
<p>会析构第一个对象或者最后一个对象，不同的编译器会有所不同</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212037845.png" alt="image-20221221203738760"></p>
<h3 id="数组对象创建与析构过程："><a href="#数组对象创建与析构过程：" class="headerlink" title="数组对象创建与析构过程："></a>数组对象创建与析构过程：</h3><p><img src="https://raw.githubusercontent.com/renmale-lv/BlogImage/main/202211291953839.jpg"></p>
<p>测试代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;new&gt;</span>		<span class="comment">//placement new</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> jj03</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">A</span>() : <span class="built_in">id</span>(<span class="number">0</span>)      &#123; cout &lt;&lt; <span class="string">&quot;default ctor. this=&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot; id=&quot;</span> &lt;&lt; id &lt;&lt; endl; &#125;</span><br><span class="line">		<span class="built_in">A</span>(<span class="type">int</span> i) : <span class="built_in">id</span>(i) &#123; cout &lt;&lt; <span class="string">&quot;ctor. this=&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot; id=&quot;</span> &lt;&lt; id &lt;&lt; endl; &#125;</span><br><span class="line">		~<span class="built_in">A</span>()             &#123; cout &lt;&lt; <span class="string">&quot;dtor. this=&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot; id=&quot;</span> &lt;&lt; id &lt;&lt; endl; &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">test_array_new_and_placement_new</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\ntest_placement_new().......... \n&quot;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="type">size_t</span> size = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//case 1</span></span><br><span class="line">			<span class="comment">//模擬 memory pool 的作法, array new + placement new. 崩潰 </span></span><br><span class="line"></span><br><span class="line">			A* buf = (A*)(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">sizeof</span>(A)*size]);</span><br><span class="line">			A* tmp = buf;</span><br><span class="line"></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;buf=&quot;</span> &lt;&lt; buf &lt;&lt; <span class="string">&quot;  tmp=&quot;</span> &lt;&lt; tmp &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">				<span class="keyword">new</span> (tmp++) <span class="built_in">A</span>(i);  			<span class="comment">//3次 调用ctor </span></span><br><span class="line"></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;buf=&quot;</span> &lt;&lt; buf &lt;&lt; <span class="string">&quot;  tmp=&quot;</span> &lt;&lt; tmp &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//!	delete [] buf;    	//crash. why?</span></span><br><span class="line">			<span class="comment">//因為這其實是個 char array，看到 delete [] buf; 編譯器會企圖喚起多次 A::~A. </span></span><br><span class="line">			<span class="comment">// 但 array memory layout 中找不到與 array 元素個數 (本例 3) 相關的信息, </span></span><br><span class="line">			<span class="comment">// -- 整個格局都錯亂 (從我對 VC 的認識而言)，於是崩潰。 </span></span><br><span class="line">			<span class="keyword">delete</span> buf;     	<span class="comment">//dtor just one time, ~[0]	</span></span><br><span class="line"></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//case 2</span></span><br><span class="line">			<span class="comment">//回頭測試單純的 array new</span></span><br><span class="line"></span><br><span class="line">			A* buf = <span class="keyword">new</span> A[size];  <span class="comment">//default ctor 3 次. [0]先於[1]先於[2])</span></span><br><span class="line">			<span class="comment">//A必須有 default ctor, 否則 [Error] no matching function for call to &#x27;jj02::A::A()&#x27;</span></span><br><span class="line">			A* tmp = buf;</span><br><span class="line"></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;buf=&quot;</span> &lt;&lt; buf &lt;&lt; <span class="string">&quot;  tmp=&quot;</span> &lt;&lt; tmp &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">				<span class="keyword">new</span> (tmp++) <span class="built_in">A</span>(i);  		<span class="comment">//3次 ctor </span></span><br><span class="line"></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;buf=&quot;</span> &lt;&lt; buf &lt;&lt; <span class="string">&quot;  tmp=&quot;</span> &lt;&lt; tmp &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">delete</span>[] buf;    <span class="comment">//dtor three times (次序逆反, [2]先於[1]先於[0])	</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//case 3	</span></span><br><span class="line">			<span class="comment">//掌握崩潰原因, 再次模擬 memory pool作法, array new + placement new. 	</span></span><br><span class="line">			<span class="comment">//不, 不做了, 因為 memory pool 只是供應 memory, 它並不管 construction, </span></span><br><span class="line">			<span class="comment">//也不管 destruction. 它只負責回收 memory. </span></span><br><span class="line">			<span class="comment">//所以它是以 void* 或 char* 取得 memory, 釋放 (刪除)的也是 void* or char*.  </span></span><br><span class="line">			<span class="comment">//不像本例 case 1 釋放 (刪除) 的是 A*. </span></span><br><span class="line">			<span class="comment">//</span></span><br><span class="line">			<span class="comment">//事實上 memory pool 形式如 jj04::test </span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="comment">//namespace</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	jj03::<span class="built_in">test_array_new_and_placement_new</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212037674.png" alt="image-20221221203750616"></p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212037559.png" alt="image-20221221203756508"></p>
<p>可以看出，构造函数调用顺序时按照构建的顺序来的，而且分配的内存时连续的，每个对象之间内存地址隔4个字节，是因为class A里面只有一个int对象，占4个字节，而析构函数则是逆序释放的。</p>
<p>注意在case1中，构造了三个对象，但只调用了一次dtor，在vs和vscode中都是只释放了第一个对象。</p>
<h4 id="数组对象在内存中的分配"><a href="#数组对象在内存中的分配" class="headerlink" title="数组对象在内存中的分配"></a>数组对象在内存中的分配</h4><p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212038347.png" alt="image-20221221203803273"></p>
<p><strong>白色部分是两个一模一样的cokie，黄色部分是调试信息，灰色部分是我们真正用到的内存，蓝色部分则是补充物，补充字节数使整个内存块的大小为16字节的倍数。</strong></p>
<p>在这个例子中，delete pi和delete[] pi是一样的，这是因为int类型没有析构函数，类似上上个例子中的Complex，它的析构函数是没有意义的，所以对它们来说，加不加 [ ] 是一样的。</p>
<p>但是下面这个例子就不一样了：</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212038836.jpeg" alt="img"></p>
<p>这个例子和上面最主要的区别为灰色部分，Demo对象中包含了3个int类型的变量，一个Demo类型就占12个字节，而灰色上面的3则标记了分配了多少个Demo对象，好告诉程序要调用多少次析构函数。</p>
<h2 id="四、placement-new"><a href="#四、placement-new" class="headerlink" title="四、placement new"></a>四、placement new</h2><p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212038286.png" alt="image-20221221203816192"></p>
<p>$placement\space new$ （定位放置new）是将不同于$new$，它是将对象构建在一个已经被分配好的内存之中，所以在使用时，需要一个已经分配好的内存。</p>
<p>图中的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Complex* pc = <span class="built_in">new</span>(buf)<span class="built_in">Complex</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>会被编译成三步：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* mem = <span class="keyword">operator</span> <span class="built_in">new</span>(<span class="built_in">sizeof</span>(Complex),buf);  <span class="comment">//占用分配好的内存，没有实际的意义</span></span><br><span class="line">pc = <span class="built_in">static_cast</span>&lt;Complex*&gt;(mem);				<span class="comment">//转型</span></span><br><span class="line">pc -&gt; Complex:<span class="built_in">Complex</span>(<span class="number">1</span>,<span class="number">2</span>);						<span class="comment">//构造对象</span></span><br><span class="line"><span class="comment">//所以实际上placement new就跟调用构造函数差不多</span></span><br></pre></td></tr></table></figure>

<p>使用语法$A*p&#x3D;new(mem)A$定位生成对象时，会自动调用类A的构造函数（如上），但是由于对象的空间不会自动释放（对象实际上是借用别人的空间），所以必须显示调用类A的析构函数，所以说</p>
<p><strong>没有所谓的$placement\space delete$，因为$placement\space new$根本就没有分配内存</strong>，是借用的别人的空间。</p>
<h2 id="五、重载"><a href="#五、重载" class="headerlink" title="五、重载"></a>五、重载</h2><h3 id="1、C-内存分配"><a href="#1、C-内存分配" class="headerlink" title="1、C++内存分配"></a>1、C++内存分配</h3><p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212038873.png" alt="image-20221221203824778"></p>
<p>默认情况下，在调用new分配内存时，系统会走下面（即②）这条路线，调用全局函数，但是如果你在类中重载了$:operator\space new()$函数，则系统会<strong>优先调用你重载的函数</strong>，所以我们可以自己通过重载的方式来改变内存的分配机制，但是最后还是会调用到系统的全局$:operator\space new()$函数。</p>
<p>另外，系统的全局$:operator\space new()$函数也是可以重载的，但是比较少见，一旦重载，影响的就不仅仅局限于这个类了，所以一般不使用这种方式。</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212038881.png" alt="image-20221221203834790"></p>
<p>C++容器，即STL中的内存分配到头来也是调用了$:operator\space new()$函数。</p>
<h3 id="2、重载示例"><a href="#2、重载示例" class="headerlink" title="2、重载示例"></a>2、重载示例</h3><p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212038971.webp" alt="img"></p>
<p>一般不推荐重载::operator new()函数，因为它对全局有影响，如果使用不当将造成很大的问题。</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212038448.png" alt="image-20221221203851372"></p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212038059.webp" alt="img"></p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212039638.png" alt="image-20221221203903534"></p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212039932.webp" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/renmale-lv/BlogImage/main/202212071932350.webp" alt="img"></p>
<p>与重载系统函数不同，如果在类内重载$:operator \space new()$函数，可以有许多种方法，但是必须保证函数参数第一个为$size_t$类型，对于$:operator\space delete()$函数，第一个参数为$void*$类型，第二个参数为$size_t$类型（可以省略）。</p>
<p>但是我们一般不会重载$:operator \space delete()$函数，因为重载的函数无法被手动调用，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void operator delete(void* ptr， int num)</span><br><span class="line">&#123;</span><br><span class="line"> std::cout &lt;&lt; &quot;operator delete&quot; &lt;&lt; std::endl;</span><br><span class="line"> std::free(ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delete(10) p;    // 不合法的</span><br></pre></td></tr></table></figure>

<p>因为重载$:operator \space delete()$函数意义为与重载的$:operator \space new()$函数配套，只有$:operator \space new()$函数报异常了，才会调用对应的$:operator \space delete()$，若此时没有对应的$:operator \space delete()$，则无法释放内存。</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212047747.webp" alt="202212071932837"></p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212048190.webp" alt="202212071932560"></p>
<p>我自己的实践也是如上，会报未经处理的异常，不会调用重载的$delete$函数。</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212048314.webp" alt="202212071933106"></p>
<h4 id="测试代码1："><a href="#测试代码1：" class="headerlink" title="测试代码1："></a>测试代码1：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> jj06</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> _id;</span><br><span class="line">  <span class="type">long</span> _data;</span><br><span class="line">  string _str;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span>;</span><br><span class="line">  	<span class="function"><span class="type">static</span> <span class="type">void</span>  <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* deadObject, <span class="type">size_t</span> size)</span></span>;</span><br><span class="line">  	<span class="type">static</span> <span class="type">void</span>* <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="type">size_t</span> size);</span><br><span class="line">  	<span class="type">static</span> <span class="type">void</span>  <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="type">void</span>* deadObject, <span class="type">size_t</span> size);	  	  </span><br><span class="line">  </span><br><span class="line">  <span class="built_in">Foo</span>() : _id(<span class="number">0</span>)      &#123; cout &lt;&lt; <span class="string">&quot;default ctor. this=&quot;</span>  &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot; id=&quot;</span> &lt;&lt; _id &lt;&lt; endl;  &#125;</span><br><span class="line">  <span class="built_in">Foo</span>(<span class="type">int</span> i) : _id(i) &#123; cout &lt;&lt; <span class="string">&quot;ctor. this=&quot;</span>  &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot; id=&quot;</span> &lt;&lt; _id &lt;&lt; endl;  &#125;</span><br><span class="line">  <span class="comment">//virtual </span></span><br><span class="line">  ~<span class="built_in">Foo</span>()              &#123; cout &lt;&lt; <span class="string">&quot;dtor. this=&quot;</span>  &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot; id=&quot;</span> &lt;&lt; _id &lt;&lt; endl;  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//不加 virtual dtor, sizeof = 12, new Foo[5] =&gt; operator new[]() 的 size 參數是 64, </span></span><br><span class="line">  <span class="comment">//加了 virtual dtor, sizeof = 16, new Foo[5] =&gt; operator new[]() 的 size 參數是 84, </span></span><br><span class="line">  <span class="comment">//上述二例，多出來的 4 可能就是個 size_t 欄位用來放置 array size. </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* Foo::<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  	Foo* p = (Foo*)<span class="built_in">malloc</span>(size);  </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Foo::operator new(), size=&quot;</span> &lt;&lt; size &lt;&lt; <span class="string">&quot;\t  return: &quot;</span> &lt;&lt; p &lt;&lt; endl;  	</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> Foo::<span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* pdead, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Foo::operator delete(), pdead= &quot;</span> &lt;&lt; pdead &lt;&lt; <span class="string">&quot;  size= &quot;</span> &lt;&lt; size &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">free</span>(pdead);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* Foo::<span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="type">size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  	Foo* p = (Foo*)<span class="built_in">malloc</span>(size);  <span class="comment">//crash, 問題可能出在這兒 </span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Foo::operator new[](), size=&quot;</span> &lt;&lt; size &lt;&lt; <span class="string">&quot;\t  return: &quot;</span> &lt;&lt; p &lt;&lt; endl;  </span><br><span class="line">	</span><br><span class="line">  	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> Foo::<span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="type">void</span>* pdead, <span class="type">size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Foo::operator delete[](), pdead= &quot;</span> &lt;&lt; pdead &lt;&lt; <span class="string">&quot;  size= &quot;</span> &lt;&lt; size &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">free</span>(pdead);</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//-------------	</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_overload_operator_new_and_array_new</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\ntest_overload_operator_new_and_array_new().......... \n&quot;</span>;		</span><br><span class="line">	</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;sizeof(Foo)= &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Foo) &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	&#123;	</span><br><span class="line">    Foo* p = <span class="keyword">new</span> <span class="built_in">Foo</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    </span><br><span class="line">    Foo* pArray = <span class="keyword">new</span> Foo[<span class="number">5</span>];	<span class="comment">//無法給 array elements 以 initializer </span></span><br><span class="line">    <span class="keyword">delete</span> [] pArray;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#123;	    </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;testing global expression ::new and ::new[] \n&quot;</span>;</span><br><span class="line">	<span class="comment">// 這會繞過 overloaded new(), delete(), new[](), delete[]() </span></span><br><span class="line">	<span class="comment">// 但當然 ctor, dtor 都會被正常呼叫.  </span></span><br><span class="line">	</span><br><span class="line">    Foo* p = ::<span class="keyword">new</span> <span class="built_in">Foo</span>(<span class="number">7</span>);</span><br><span class="line">    ::<span class="keyword">delete</span> p;</span><br><span class="line">    </span><br><span class="line">    Foo* pArray = ::<span class="keyword">new</span> Foo[<span class="number">5</span>];	</span><br><span class="line">    ::<span class="keyword">delete</span> [] pArray;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">//namespace</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    jj06::<span class="built_in">test_overload_operator_new_and_array_new</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212048212.png" alt="202212072013669"></p>
<h4 id="测试代码2："><a href="#测试代码2：" class="headerlink" title="测试代码2："></a>测试代码2：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>  <span class="comment">//for test</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> jj07</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Bad</span> &#123; &#125;;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Foo</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Foo</span>() &#123; cout &lt;&lt; <span class="string">&quot;Foo::Foo()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">        <span class="built_in">Foo</span>(<span class="type">int</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Foo::Foo(int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="comment">// throw Bad();  </span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1) 這個就是一般的 operator new() 的重載 </span></span><br><span class="line">        <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;operator new(size_t size), size= &quot;</span> &lt;&lt; size &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2) 這個就是標準庫已經提供的 placement new() 的重載 (形式)</span></span><br><span class="line">        <span class="comment">//    (所以我也模擬 standard placement new 的動作, just return ptr) </span></span><br><span class="line">        <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size, <span class="type">void</span>* start)</span></span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;operator new(size_t size, void* start), size= &quot;</span> &lt;&lt; size &lt;&lt; <span class="string">&quot;  start= &quot;</span> &lt;&lt; start &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> start;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3) 這個才是嶄新的 placement new </span></span><br><span class="line">        <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size, <span class="type">long</span> extra)</span></span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;operator new(size_t size, long extra)  &quot;</span> &lt;&lt; size &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; extra &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">malloc</span>(size + extra);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(4) 這又是一個 placement new </span></span><br><span class="line">        <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size, <span class="type">long</span> extra, <span class="type">char</span> init)</span></span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;operator new(size_t size, long extra, char init)  &quot;</span> &lt;&lt; size &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; extra &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; init &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">malloc</span>(size + extra);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(5) 這又是一個 placement new, 但故意寫錯第一參數的 type (它必須是 size_t 以滿足正常的 operator new) </span></span><br><span class="line">        <span class="comment">//!     void* operator new(long extra, char init) &#123; //[Error] &#x27;operator new&#x27; takes type &#x27;size_t&#x27; (&#x27;unsigned int&#x27;) as first parameter [-fpermissive]</span></span><br><span class="line">        <span class="comment">//!     cout &lt;&lt; &quot;op-new(long,char)&quot; &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">//!     return malloc(extra);</span></span><br><span class="line">        <span class="comment">//!     &#125;   </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//以下是搭配上述 placement new 的各個 called placement delete. </span></span><br><span class="line">        <span class="comment">//當 ctor 發出異常，這兒對應的 operator (placement) delete 就會被喚起. </span></span><br><span class="line">        <span class="comment">//應該是要負責釋放其搭檔兄弟 (placement new) 分配所得的 memory.  </span></span><br><span class="line">        <span class="comment">//(1) 這個就是一般的 operator delete() 的重載 </span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>*, <span class="type">size_t</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;operator delete(void*,size_t)  &quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2) 這是對應上述的 (2)  </span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>*, <span class="type">void</span>*)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;operator delete(void*,void*)  &quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3) 這是對應上述的 (3)  </span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>*, <span class="type">long</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;operator delete(void*,long)  &quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(4) 這是對應上述的 (4)  </span></span><br><span class="line">        <span class="comment">//如果沒有一一對應, 也不會有任何編譯報錯 </span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>*, <span class="type">long</span>, <span class="type">char</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;operator delete(void*,long,char)  &quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> m_i;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//------------- </span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test_overload_placement_new</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n\n\ntest_overload_placement_new().......... \n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Foo start;  <span class="comment">//Foo::Foo</span></span><br><span class="line"></span><br><span class="line">        Foo* p1 = <span class="keyword">new</span> Foo;           <span class="comment">//op-new(size_t)</span></span><br><span class="line">        Foo* p2 = <span class="built_in">new</span> (&amp;start) Foo;  <span class="comment">//op-new(size_t,void*)</span></span><br><span class="line">        Foo* p3 = <span class="built_in">new</span> (<span class="number">100</span>) Foo;     <span class="comment">//op-new(size_t,long)</span></span><br><span class="line">        Foo* p4 = <span class="built_in">new</span> (<span class="number">100</span>, <span class="string">&#x27;a&#x27;</span>) Foo; <span class="comment">//op-new(size_t,long,char)</span></span><br><span class="line"></span><br><span class="line">        Foo* p5 = <span class="built_in">new</span> (<span class="number">100</span>) <span class="built_in">Foo</span>(<span class="number">1</span>);     <span class="comment">//op-new(size_t,long)  op-del(void*,long)</span></span><br><span class="line">        Foo* p6 = <span class="built_in">new</span> (<span class="number">100</span>, <span class="string">&#x27;a&#x27;</span>) <span class="built_in">Foo</span>(<span class="number">1</span>); <span class="comment">//</span></span><br><span class="line">        Foo* p7 = <span class="built_in">new</span> (&amp;start) <span class="built_in">Foo</span>(<span class="number">1</span>);  <span class="comment">//</span></span><br><span class="line">        Foo* p8 = <span class="keyword">new</span> <span class="built_in">Foo</span>(<span class="number">1</span>);           <span class="comment">//</span></span><br><span class="line">        <span class="comment">//VC6 warning C4291: &#x27;void *__cdecl Foo::operator new(unsigned int)&#x27;</span></span><br><span class="line">        <span class="comment">//no matching operator delete found; memory will not be freed if</span></span><br><span class="line">        <span class="comment">//initialization throws an exception</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">//namespace   </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    jj07::<span class="built_in">test_overload_placement_new</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212049944.png" alt="202212072015184"></p>
<h2 id="六、pre-class-allocator"><a href="#六、pre-class-allocator" class="headerlink" title="六、pre-class allocator"></a>六、pre-class allocator</h2><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212049278.jpeg" alt="202212090115498"></p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212050452.jpeg" alt="202212090115585"></p>
<p>每个对象大小为$8byte$，代码中通过预先分配一大块内存（类似内存池），用单向链表串连起来，每个对象间间隔$8$个$byte$，而右边则是分别$new$多个对象，每个对象的内存中还要分配$cookie$信息，头尾各一个各$4byte$，所以间隔$16byte$。</p>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> jj04</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//ref. C++Primer 3/e, p.765</span></span><br><span class="line">    <span class="comment">//per-class allocator </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Screen</span>(<span class="type">int</span> x) : <span class="built_in">i</span>(x) &#123; &#125;;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> i; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span>)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span>  <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>*, <span class="type">size_t</span>)</span></span>;   <span class="comment">//(2)</span></span><br><span class="line">        <span class="comment">//! void  operator delete(void*);           //(1) 二擇一. 若(1)(2)並存,會有很奇怪的報錯 (摸不著頭緒) </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Screen* next;</span><br><span class="line">        <span class="type">static</span> Screen* freeStore;</span><br><span class="line">        <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> screenChunk;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">    &#125;;</span><br><span class="line">    Screen* Screen::freeStore = <span class="number">0</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> Screen::screenChunk = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span>* Screen::<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Screen *p;</span><br><span class="line">        <span class="keyword">if</span> (!freeStore) &#123;</span><br><span class="line">            <span class="comment">//linked list 是空的，所以攫取一大塊 memory</span></span><br><span class="line">            <span class="comment">//以下呼叫的是 global operator new</span></span><br><span class="line">            <span class="type">size_t</span> chunk = screenChunk * size;</span><br><span class="line">            freeStore = p =</span><br><span class="line">                <span class="built_in">reinterpret_cast</span>&lt;Screen*&gt;(<span class="keyword">new</span> <span class="type">char</span>[chunk]);</span><br><span class="line">            <span class="comment">//將分配得來的一大塊 memory 當做 linked list 般小塊小塊串接起來</span></span><br><span class="line">            <span class="keyword">for</span> (; p != &amp;freeStore[screenChunk - <span class="number">1</span>]; ++p)</span><br><span class="line">                p-&gt;next = p + <span class="number">1</span>;</span><br><span class="line">            p-&gt;next = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = freeStore;</span><br><span class="line">        freeStore = freeStore-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//! void Screen::operator delete(void *p)       //(1)</span></span><br><span class="line">    <span class="function"><span class="type">void</span> Screen::<span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span> *p, <span class="type">size_t</span>)</span>   <span class="comment">//(2)二擇一 </span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//將 deleted object 收回插入 free list 前端</span></span><br><span class="line">        (<span class="built_in">static_cast</span>&lt;Screen*&gt;(p))-&gt;next = freeStore;</span><br><span class="line">        freeStore = <span class="built_in">static_cast</span>&lt;Screen*&gt;(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-------------</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test_per_class_allocator_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\ntest_per_class_allocator_1().......... \n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="built_in">sizeof</span>(Screen) &lt;&lt; endl;     <span class="comment">//8 </span></span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span> <span class="type">const</span> N = <span class="number">100</span>;</span><br><span class="line">        Screen* p[N];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt; N; ++i)</span><br><span class="line">            p[i] = <span class="keyword">new</span> <span class="built_in">Screen</span>(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//輸出前 10 個 pointers, 用以比較其間隔 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; ++i)</span><br><span class="line">            cout &lt;&lt; p[i] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt; N; ++i)</span><br><span class="line">            <span class="keyword">delete</span> p[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">//namespace</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    jj04::<span class="built_in">test_per_class_allocator_1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212050723.png" alt="202212090124601"></p>
<p><img src="https://gitee.com/renmale-sztu/image/raw/master/img/202212212051463.png" alt="202212090129060"></p>
<p>奇怪，在visual studio中能够正确输出，而在vscode中却间隔16个字节</p>
]]></content>
      <tags>
        <tag>malloc</tag>
      </tags>
  </entry>
</search>
